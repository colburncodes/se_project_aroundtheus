!function(){"use strict";function e(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function t(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var r=class{constructor(e,r){t(this,"_showInputError",(e=>{const t=document.querySelector(`.${e.id}-error`);t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass),e.classList.add(this._settings.inputErrorClass)})),t(this,"_hideInputError",(e=>{const t=document.querySelector(`.${e.id}-error`);t.textContent="",e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass)})),t(this,"_checkInputValidity",((e,t)=>{e.validity.valid?this._hideInputError(e,t):this._showInputError(e,t)})),t(this,"_checkFormValidity",(()=>[...this._formElement.querySelectorAll(this._settings.inputSelector)].every((e=>e.validity.valid)))),t(this,"_toggleButtonState",(()=>{const e=this._checkFormValidity(),t=this._formElement.querySelector(this._settings.submitButtonSeletor);e?(t.classList.remove(this._settings.inactiveButtonClass),t.removeAttribute("disabled")):(t.setAttribute("disabled","true"),t.classList.add(this._settings.inactiveButtonClass))})),this._formElement=e,this._settings=r}enableValidation(){Array.from(document.querySelectorAll(this._settings.formSelector)).forEach((e=>{e.addEventListener("submit",(function(e){e.preventDefault()}));const t=[...e.querySelectorAll(this._settings.inputSelector)];this._toggleButtonState(),e.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleButtonState()}),0)})),t.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e,this._settings),this._toggleButtonState()}))}))}))}};function n(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var s=class{constructor(e){n(this,"_handleCloseButton",(()=>{this.closeModal()})),n(this,"_handleEscapePopup",(e=>{"Escape"===e.key&&this.closeModal()})),n(this,"_handleModalOverlay",(e=>{e.target.classList.contains(".modal")&&this.closeModal()})),this._popupElement=document.querySelector(`${e}`)}openModal(){this._popupElement.classList.add("modal__open"),document.addEventListener("keyup",this._handleEscapePopup)}closeModal(){this._popupElement.classList.remove("modal__open"),document.removeEventListener("keyup",this._handleEscapePopup)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal__open")&&this.closeModal(),e.target.classList.contains("modal__close")&&this.closeModal()}))}},o=class extends s{constructor(e){let{popupSelector:t,handleFormSubmit:r}=e;super(t),this._modalForm=this._popupElement.querySelector(".modal__form"),this._inputs=this._modalForm.querySelectorAll(".modal__input"),this._handleFormSubmit=r}_getInputValues(){return this._formValues={},this._inputs.forEach((e=>this._formValues[e.name]=e.value)),this._formValues}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}closeModal(){this._modalForm.reset(),super.closeModal()}};const i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSeletor:".modal__save-button",inactiveButtonClass:"modal__button-disabled",inputErrorClass:"modal__input-error",errorClass:"modal__error_visible"},a=document.querySelector(".modal__form-create"),l=document.querySelector(".profile__add-button"),c=document.querySelector(".profile__edit-button"),u=document.querySelector(".modal__input-profile-name"),d=document.querySelector(".modal__input-profile-description"),m=new class{constructor(t){let{baseUrl:r,authToken:n}=t;e(this,"getInitialCards",(async()=>{let e=await fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authToken}});return e.ok?e.json():Promise.reject(`Error: ${e.status} ${e.statusText}`)})),e(this,"addCard",(async e=>{let{name:t,link:r}=e,n=await fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:r})});return n.ok?n.json():Promise.reject(`Error: ${n.status} ${n.statusText}`)})),e(this,"deleteCardById",(async e=>{let t=await fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({id:e})});return t.ok?t.json():Promise.reject(`Error: ${t.status} ${t.statusText}`)})),e(this,"getUserInfo",(async()=>{let e=await fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authToken}});return e.ok?e.json():Promise.reject(`Error: ${e.status} ${e.statusText}`)})),e(this,"editUserInfo",(async e=>{let{name:t,about:r}=e,n=await fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:r})});return n.ok?n.json():Promise.reject(`Error: ${n.status} ${n.statusText}`)})),e(this,"addUserLikes",(async e=>{let t=await fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({id:e})});return t.ok?t.json():Promise.reject(`Error: ${t.status} ${t.statusText}`)})),this._baseUrl=r,this._authToken=n}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",authToken:"db0cb0b5-b0ef-4843-a8af-9c3db60e50cb"}),h=document.querySelector("#modal__edit"),_=document.querySelector("#modal__create"),p=new class extends s{open(e){let{name:t,link:r}=e;this._imageElement=document.querySelector("#image-modal"),super.setEventListeners();const n=this._imageElement.querySelector(".modal__preview-image"),s=this._imageElement.querySelector(".modal__caption");n.src=r,n.alt=t,s.textContent=t,super.openModal()}}("#image-modal"),y=new class{constructor(e,t){this._nameElement=document.querySelector(e),this._descriptionElement=document.querySelector(t)}getUserInfo(){return{name:this._nameElement.textContent,role:this._descriptionElement.textContent}}setUserInfo(e){let{name:t,about:r}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=r}}(".profile__title",".profile__description");m.getUserInfo().then((e=>{y.setUserInfo({name:e.name,about:e.about})})).catch((e=>{console.error(e)}));const f=new r(h,i),v=new r(_,i);l.addEventListener("click",(()=>{b.openModal()}));const b=new o({popupSelector:"#modal__create",handleFormSubmit:e=>{m.addCard(e).then((e=>e)).catch((e=>{console.error(e)})),a.reset(),b.closeModal()}});c.addEventListener("click",(()=>{const{name:e,role:t}=y.getUserInfo();u.value=e,d.value=t,g.openModal()}));const g=new o({popupSelector:"#modal__edit",handleFormSubmit:e=>{m.editUserInfo(e).then((e=>{y.setUserInfo({name:e.name,about:e.about})})).catch((e=>{console.error(e)})),g.closeModal()}});m.getInitialCards().then((e=>{const t=new class{constructor(e,t){let{items:r,renderer:n}=e;this._items=r,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:e,renderer:()=>{e.forEach((e=>{const r=new class{constructor(e,t){let{data:r,handleImageClick:n,handleDeleteClick:s}=e;var o,i,a;o=this,a=()=>this._element.querySelector(".card__like-button").classList.toggle("card__like-active"),(i=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(i="_handleLikeIcon"))in o?Object.defineProperty(o,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):o[i]=a,this._name=r.name,this._link=r.link,this._id=r._id,this._ownerId=r.owner._id,this._cardSelector=t,this._handleImageClick=n,this._handleDeleteClick=s}getById(){return this._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}handleDeleteCard(){this._element.remove(),this._element=null}_setEventListeners(){this._element.querySelector(".card__delete-button").addEventListener("click",(()=>this._handleDeleteClick())),this._element.querySelector(".card__like-button").addEventListener("click",(()=>this._handleLikeIcon())),this._element.querySelector(".card__image").addEventListener("click",(()=>this._handleImageClick({name:this._name,src:this._link})))}generateCard(){this._element=this._getTemplate(),this._setEventListeners();const e=this._element.querySelector(".card__image"),t=this._element.querySelector(".card__label-text");return e.src=this._link,e.alt=this._name,t.textContent=this._name,this._element}}({data:e,handleImageClick:()=>{p.open(e)},handleDeleteClick:()=>{const e=r.getById();m.deleteCardById(e).then((()=>{r.handleDeleteCard(),console.log("Card was deleted successfully")})).catch((e=>console.error(e)))}},"#card-template");t.addItem(r.generateCard())}))}},".cards__list");t.renderItems()})).catch((e=>{console.error(e)})),g.setEventListeners(),b.setEventListeners(),p.setEventListeners(),f.enableValidation(),v.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoicTJCQStFQSxNQS9FQSxNQUNFQSxZQUFZQyxFQUFhQyxHQUFVLDBCQUtoQkMsSUFDakIsTUFBTUMsRUFBZUMsU0FBU0MsY0FBZSxJQUFHSCxFQUFNSSxZQUN0REgsRUFBYUksWUFBY0wsRUFBTU0sa0JBQ2pDTCxFQUFhTSxVQUFVQyxJQUFJQyxLQUFLQyxVQUFVQyxZQUMxQ1gsRUFBTU8sVUFBVUMsSUFBSUMsS0FBS0MsVUFBVUUsZ0JBQWdCLElBQ3BELDBCQUVrQlosSUFDakIsTUFBTUMsRUFBZUMsU0FBU0MsY0FBZSxJQUFHSCxFQUFNSSxZQUN0REgsRUFBYUksWUFBYyxHQUMzQkwsRUFBTU8sVUFBVU0sT0FBT0osS0FBS0MsVUFBVUUsaUJBQ3RDWCxFQUFhTSxVQUFVTSxPQUFPSixLQUFLQyxVQUFVQyxXQUFXLElBQ3pELDhCQUVxQixDQUFDWCxFQUFPRCxLQUN4QkMsRUFBTWMsU0FBU0MsTUFDakJOLEtBQUtPLGdCQUFnQmhCLEVBQU9ELEdBRTVCVSxLQUFLUSxnQkFBZ0JqQixFQUFPRCxFQUM5QixJQUNELDZCQUVvQixJQUNELElBQ2JVLEtBQUtTLGFBQWFDLGlCQUFpQlYsS0FBS0MsVUFBVVUsZ0JBRXRDQyxPQUFPckIsR0FBVUEsRUFBTWMsU0FBU0MsVUFDbEQsNkJBRW9CLEtBQ25CLE1BQU1PLEVBQVViLEtBQUtjLHFCQUNmQyxFQUFTZixLQUFLUyxhQUFhZixjQUMvQk0sS0FBS0MsVUFBVWUscUJBRWJILEdBQ0ZFLEVBQU9qQixVQUFVTSxPQUFPSixLQUFLQyxVQUFVZ0IscUJBQ3ZDRixFQUFPRyxnQkFBZ0IsY0FFdkJILEVBQU9JLGFBQWEsV0FBWSxRQUNoQ0osRUFBT2pCLFVBQVVDLElBQUlDLEtBQUtDLFVBQVVnQixxQkFDdEMsSUE1Q0FqQixLQUFLUyxhQUFlcEIsRUFDcEJXLEtBQUtDLFVBQVlYLENBQ25CLENBNkNBOEIsbUJBQ21CQyxNQUFNQyxLQUNyQjdCLFNBQVNpQixpQkFBaUJWLEtBQUtDLFVBQVVzQixlQUdsQ0MsU0FBU25DLElBQ2hCQSxFQUFZb0MsaUJBQWlCLFVBQVUsU0FBVUMsR0FDL0NBLEVBQUlDLGdCQUNOLElBQ0EsTUFBTUMsRUFBUyxJQUNWdkMsRUFBWXFCLGlCQUFpQlYsS0FBS0MsVUFBVVUsZ0JBR2pEWCxLQUFLNkIscUJBQ0x4QyxFQUFZb0MsaUJBQWlCLFNBQVMsS0FDcENLLFlBQVcsS0FDVDlCLEtBQUs2QixvQkFBb0IsR0FDeEIsRUFBRSxJQUdQRCxFQUFPSixTQUFTakMsSUFDZEEsRUFBTWtDLGlCQUFpQixTQUFTLEtBQzlCekIsS0FBSytCLG9CQUFvQnhDLEVBQU9TLEtBQUtDLFdBQ3JDRCxLQUFLNkIsb0JBQW9CLEdBQ3pCLEdBQ0YsR0FFTixHLHNhQ2pDRixNQTNDQSxNQUNFekMsWUFBWTRDLEdBQWUsNkJBY04sS0FDbkJoQyxLQUFLaUMsWUFBWSxJQUNsQiw2QkFFcUJQLElBQ0osV0FBWkEsRUFBSVEsS0FDTmxDLEtBQUtpQyxZQUNQLElBQ0QsOEJBRXNCUCxJQUNqQkEsRUFBSVMsT0FBT3JDLFVBQVVzQyxTQUFTLFdBQ2hDcEMsS0FBS2lDLFlBQ1AsSUExQkFqQyxLQUFLcUMsY0FBZ0I1QyxTQUFTQyxjQUFlLEdBQUVzQyxJQUNqRCxDQUVBTSxZQUNFdEMsS0FBS3FDLGNBQWN2QyxVQUFVQyxJQUFJLGVBQ2pDTixTQUFTZ0MsaUJBQWlCLFFBQVN6QixLQUFLdUMsbUJBQzFDLENBRUFOLGFBQ0VqQyxLQUFLcUMsY0FBY3ZDLFVBQVVNLE9BQU8sZUFDcENYLFNBQVMrQyxvQkFBb0IsUUFBU3hDLEtBQUt1QyxtQkFDN0MsQ0FrQkFFLG9CQUNFekMsS0FBS3FDLGNBQWNaLGlCQUFpQixhQUFjQyxJQUM1Q0EsRUFBSVMsT0FBT3JDLFVBQVVzQyxTQUFTLGdCQUNoQ3BDLEtBQUtpQyxhQUVIUCxFQUFJUyxPQUFPckMsVUFBVXNDLFNBQVMsaUJBQ2hDcEMsS0FBS2lDLFlBQ1AsR0FFSixHQ1JGLEVBOUJBLGNBQTRCUyxFQUMxQnRELFlBQVksR0FBcUMsSUFBckMsY0FBRTRDLEVBQWEsaUJBQUVXLEdBQWtCLEVBQzdDQyxNQUFNWixHQUNOaEMsS0FBSzZDLFdBQWE3QyxLQUFLcUMsY0FBYzNDLGNBQWMsZ0JBQ25ETSxLQUFLOEMsUUFBVTlDLEtBQUs2QyxXQUFXbkMsaUJBQWlCLGlCQUNoRFYsS0FBSytDLGtCQUFvQkosQ0FDM0IsQ0FFQUssa0JBS0UsT0FKQWhELEtBQUtpRCxZQUFjLENBQUMsRUFDcEJqRCxLQUFLOEMsUUFBUXRCLFNBQ1ZqQyxHQUFXUyxLQUFLaUQsWUFBWTFELEVBQU0yRCxNQUFRM0QsRUFBTTRELFFBRTVDbkQsS0FBS2lELFdBQ2QsQ0FFQVIsb0JBQ0VHLE1BQU1ILG9CQUNOekMsS0FBSzZDLFdBQVdwQixpQkFBaUIsVUFBV0MsSUFDMUNBLEVBQUlDLGlCQUNKM0IsS0FBSytDLGtCQUFrQi9DLEtBQUtnRCxrQkFBa0IsR0FFbEQsQ0FFQWYsYUFDRWpDLEtBQUs2QyxXQUFXTyxRQUNoQlIsTUFBTVgsWUFDUixHQzdCSyxNQUlNb0IsRUFBb0IsQ0FDL0I5QixhQUFjLGVBQ2RaLGNBQWUsZ0JBQ2ZLLG9CQUFxQixzQkFDckJDLG9CQUFxQix5QkFDckJkLGdCQUFpQixxQkFDakJELFdBQVksd0JBZ0JEb0QsRUFBa0I3RCxTQUFTQyxjQUFjLHVCQUN6QzZELEVBQWdCOUQsU0FBU0MsY0FBYyx3QkFFdkM4RCxFQUFpQi9ELFNBQVNDLGNBQWMseUJBQ3hDK0QsRUFBbUJoRSxTQUFTQyxjQUN2Qyw4QkFFV2dFLEVBQTBCakUsU0FBU0MsY0FDOUMscUNDWklpRSxFQUFNLElDdEJaLE1BQ0V2RSxZQUFZLEdBQXdCLElBQXhCLFFBQUV3RSxFQUFPLFVBQUVDLEdBQVcsNEJBTWhCQyxVQUNoQixJQUFJQyxRQUFpQkMsTUFBTyxHQUFFaEUsS0FBS2lFLGlCQUFrQixDQUNuREMsUUFBUyxDQUFFQyxjQUFlbkUsS0FBS29FLGNBS2pDLE9BSFdMLEVBQVNNLEdBQ2hCTixFQUFTTyxPQUNUQyxRQUFRQyxPQUFRLFVBQVNULEVBQVNVLFVBQVVWLEVBQVNXLGFBQzlDLElBQ1osa0JBR1NaLFVBQTBCLElBQW5CLEtBQUVaLEVBQUksS0FBRXlCLEdBQU0sRUFDekJaLFFBQWlCQyxNQUFPLEdBQUVoRSxLQUFLaUUsaUJBQWtCLENBQ25EVyxPQUFRLE9BQ1JWLFFBQVMsQ0FDUEMsY0FBZW5FLEtBQUtvRSxXQUNwQixlQUFnQixvQkFFbEJTLEtBQU1DLEtBQUtDLFVBQVUsQ0FDbkI3QixPQUNBeUIsV0FPSixPQUhXWixFQUFTTSxHQUNoQk4sRUFBU08sT0FDVEMsUUFBUUMsT0FBUSxVQUFTVCxFQUFTVSxVQUFVVixFQUFTVyxhQUM5QyxJQUNaLHlCQUdnQlosVUFDZixJQUFJQyxRQUFpQkMsTUFBTyxHQUFFaEUsS0FBS2lFLGtCQUFrQnRFLElBQU0sQ0FDekRpRixPQUFRLFNBQ1JWLFFBQVMsQ0FDUEMsY0FBZW5FLEtBQUtvRSxXQUNwQixlQUFnQixvQkFFbEJTLEtBQU1DLEtBQUtDLFVBQVUsQ0FDbkJwRixTQU9KLE9BSFdvRSxFQUFTTSxHQUNoQk4sRUFBU08sT0FDVEMsUUFBUUMsT0FBUSxVQUFTVCxFQUFTVSxVQUFVVixFQUFTVyxhQUM5QyxJQUNaLHNCQUdhWixVQUNaLElBQUlDLFFBQWlCQyxNQUFPLEdBQUVoRSxLQUFLaUUsb0JBQXFCLENBQ3REQyxRQUFTLENBQUVDLGNBQWVuRSxLQUFLb0UsY0FLakMsT0FIV0wsRUFBU00sR0FDaEJOLEVBQVNPLE9BQ1RDLFFBQVFDLE9BQVEsVUFBU1QsRUFBU1UsVUFBVVYsRUFBU1csYUFDOUMsSUFDWix1QkFHY1osVUFBMkIsSUFBcEIsS0FBRVosRUFBSSxNQUFFOEIsR0FBTyxFQUMvQmpCLFFBQWlCQyxNQUFPLEdBQUVoRSxLQUFLaUUsb0JBQXFCLENBQ3REVyxPQUFRLFFBQ1JWLFFBQVMsQ0FDUEMsY0FBZW5FLEtBQUtvRSxXQUNwQixlQUFnQixvQkFFbEJTLEtBQU1DLEtBQUtDLFVBQVUsQ0FDbkI3QixPQUNBOEIsWUFNSixPQUhXakIsRUFBU00sR0FDaEJOLEVBQVNPLE9BQ1RDLFFBQVFDLE9BQVEsVUFBU1QsRUFBU1UsVUFBVVYsRUFBU1csYUFDOUMsSUFDWix1QkFHY1osVUFDYixJQUFJQyxRQUFpQkMsTUFBTyxHQUFFaEUsS0FBS2lFLHdCQUF3QnRFLElBQU0sQ0FDL0RpRixPQUFRLE1BQ1JWLFFBQVMsQ0FDUEMsY0FBZW5FLEtBQUtvRSxXQUNwQixlQUFnQixvQkFFbEJTLEtBQU1DLEtBQUtDLFVBQVUsQ0FDbkJwRixTQU9KLE9BSFdvRSxFQUFTTSxHQUNoQk4sRUFBU08sT0FDVEMsUUFBUUMsT0FBUSxVQUFTVCxFQUFTVSxVQUFVVixFQUFTVyxhQUM5QyxJQXBHWDFFLEtBQUtpRSxTQUFXTCxFQUNoQjVELEtBQUtvRSxXQUFhUCxDQUNwQixHRGtCa0IsQ0FDbEJELFFEdkJzQiw4Q0N3QnRCQyxVRHZCd0IseUNDMEJwQm9CLEVBQWdCeEYsU0FBU0MsY0FBYyxnQkFDdkN3RixFQUFlekYsU0FBU0MsY0FBYyxrQkFDdEN5RixFQUFhLElFM0JuQixjQUEyQnpDLEVBQ3pCMEMsS0FBSyxHQUFnQixJQUFoQixLQUFFbEMsRUFBSSxLQUFFeUIsR0FBTSxFQUNqQjNFLEtBQUtxRixjQUFnQjVGLFNBQVNDLGNBQWMsZ0JBQzVDa0QsTUFBTUgsb0JBRU4sTUFBTTZDLEVBQVl0RixLQUFLcUYsY0FBYzNGLGNBQWMseUJBQzdDNkYsRUFBa0J2RixLQUFLcUYsY0FBYzNGLGNBQWMsbUJBRXpENEYsRUFBVUUsSUFBTWIsRUFDaEJXLEVBQVVHLElBQU12QyxFQUNoQnFDLEVBQWdCM0YsWUFBY3NELEVBQzlCTixNQUFNTixXQUNSLEdGZW9DLGdCQUVoQ29ELEVBQVcsSUcvQmpCLE1BQ0V0RyxZQUFZdUcsRUFBY0MsR0FDeEI1RixLQUFLNkYsYUFBZXBHLFNBQVNDLGNBQWNpRyxHQUMzQzNGLEtBQUs4RixvQkFBc0JyRyxTQUFTQyxjQUFja0csRUFDcEQsQ0FFQUcsY0FDRSxNQUFPLENBQ0w3QyxLQUFNbEQsS0FBSzZGLGFBQWFqRyxZQUN4Qm9HLEtBQU1oRyxLQUFLOEYsb0JBQW9CbEcsWUFFbkMsQ0FFQXFHLFlBQVksR0FBaUIsSUFBakIsS0FBRS9DLEVBQUksTUFBRThCLEdBQU8sRUFDekJoRixLQUFLNkYsYUFBYWpHLFlBQWNzRCxFQUNoQ2xELEtBQUs4RixvQkFBb0JsRyxZQUFjb0YsQ0FDekMsR0pNYyxrQkFDTSx5QkNhdEJyQixFQUNHb0MsY0FDQUcsTUFBTUMsSUFDTFQsRUFBU08sWUFBWSxDQUNuQi9DLEtBQU1pRCxFQUFLakQsS0FDWDhCLE1BQU9tQixFQUFLbkIsT0FDWixJQUVIb0IsT0FBT0MsSUFDTkMsUUFBUUMsTUFBTUYsRUFBSSxJQVV0QixNQUFNRyxFQUFvQixJQUFJQyxFQUFjeEIsRUFBZTVCLEdBQ3JEcUQsRUFBc0IsSUFBSUQsRUFBY3ZCLEVBQWM3QixHQUU1REUsRUFBYzlCLGlCQUFpQixTQUFTLEtBQ3RDa0YsRUFBYXJFLFdBQVcsSUFHMUIsTUFBTXFFLEVBQWUsSUFBSUMsRUFBYyxDQUNyQzVFLGNEL0NVLGlCQ2dEVlcsaUJBQW1Ca0UsSUFDakJsRCxFQUNHbUQsUUFBUUQsR0FDUlgsTUFBTVcsR0FBU0EsSUFDZlQsT0FBT0MsSUFDTkMsUUFBUUMsTUFBTUYsRUFBSSxJQUV0Qi9DLEVBQWdCRixRQUNoQnVELEVBQWExRSxZQUFZLElBSTdCdUIsRUFBZS9CLGlCQUFpQixTQUFTLEtBQ3ZDLE1BQU0sS0FBRXlCLEVBQUksS0FBRThDLEdBQVNOLEVBQVNLLGNBQ2hDdEMsRUFBaUJOLE1BQVFELEVBQ3pCUSxFQUF3QlAsTUFBUTZDLEVBQ2hDZSxFQUFjekUsV0FBVyxJQUczQixNQUFNeUUsRUFBZ0IsSUFBSUgsRUFBYyxDQUN0QzVFLGNEbkVXLGVDb0VYVyxpQkFBbUJrRSxJQUNqQmxELEVBQ0dxRCxhQUFhSCxHQUNiWCxNQUFNVyxJQUNMbkIsRUFBU08sWUFBWSxDQUNuQi9DLEtBQU0yRCxFQUFLM0QsS0FDWDhCLE1BQU82QixFQUFLN0IsT0FDWixJQUVIb0IsT0FBT0MsSUFDTkMsUUFBUUMsTUFBTUYsRUFBSSxJQUV0QlUsRUFBYzlFLFlBQVksSUFJOUIwQixFQUNHc0Qsa0JBQ0FmLE1BQU1nQixJQUNMLE1BQU1DLEVBQW1CLElJeEc3QixNQUNFL0gsWUFBWSxFQUFxQmdJLEdBQW1CLElBQXhDLE1BQUVDLEVBQUssU0FBRUMsR0FBVSxFQUM3QnRILEtBQUt1SCxPQUFTRixFQUNkckgsS0FBS3dILFVBQVlGLEVBQ2pCdEgsS0FBS3lILFdBQWFoSSxTQUFTQyxjQUFjMEgsRUFDM0MsQ0FFQU0sY0FDRTFILEtBQUt1SCxPQUFPL0YsU0FBU21HLElBQ25CM0gsS0FBS3dILFVBQVVHLEVBQUssR0FFeEIsQ0FFQUMsUUFBUUQsR0FDTjNILEtBQUt5SCxXQUFXSSxRQUFRRixFQUMxQixHSjBGSSxDQUNFTixNQUFPSCxFQUNQSSxTQUFVLEtBQ1JKLEVBQU0xRixTQUFTcUYsSUFDYixNQUFNaUIsRUFBTyxJSzdHekIsTUFDRTFJLFlBQVksRUFBK0MySSxHQUFjLElBQTdELEtBQUVsQixFQUFJLGlCQUFFbUIsRUFBZ0Isa0JBQUVDLEdBQW1CLEUsWUFBQSxLLEVBdUJ2QyxJQUNoQmpJLEtBQUtrSSxTQUNGeEksY0FBYyxzQkFDZEksVUFBVXFJLE9BQU8sc0IsK1NBMUJtQyxzQix3RkFDdkRuSSxLQUFLb0ksTUFBUXZCLEVBQUszRCxLQUNsQmxELEtBQUtxSSxNQUFReEIsRUFBS2xDLEtBQ2xCM0UsS0FBS3NJLElBQU16QixFQUFLeUIsSUFDaEJ0SSxLQUFLdUksU0FBVzFCLEVBQUsyQixNQUFNRixJQUMzQnRJLEtBQUt5SSxjQUFnQlYsRUFDckIvSCxLQUFLMEksa0JBQW9CVixFQUN6QmhJLEtBQUsySSxtQkFBcUJWLENBQzVCLENBRUFXLFVBQ0UsT0FBTzVJLEtBQUtzSSxHQUNkLENBRUFPLGVBTUUsT0FMcUJwSixTQUNsQkMsY0FBY00sS0FBS3lJLGVBQ25CSyxRQUFRcEosY0FBYyxTQUN0QnFKLFdBQVUsRUFHZixDQU9BQyxtQkFDRWhKLEtBQUtrSSxTQUFTOUgsU0FDZEosS0FBS2tJLFNBQVcsSUFDbEIsQ0FFQWUscUJBQ0VqSixLQUFLa0ksU0FDRnhJLGNBQWMsd0JBQ2QrQixpQkFBaUIsU0FBUyxJQUFNekIsS0FBSzJJLHVCQUV4QzNJLEtBQUtrSSxTQUNGeEksY0FBYyxzQkFDZCtCLGlCQUFpQixTQUFTLElBQU16QixLQUFLa0osb0JBRXhDbEosS0FBS2tJLFNBQVN4SSxjQUFjLGdCQUFnQitCLGlCQUFpQixTQUFTLElBQ3BFekIsS0FBSzBJLGtCQUFrQixDQUNyQnhGLEtBQU1sRCxLQUFLb0ksTUFDWDVDLElBQUt4RixLQUFLcUksU0FHaEIsQ0FFQWMsZUFDRW5KLEtBQUtrSSxTQUFXbEksS0FBSzZJLGVBQ3JCN0ksS0FBS2lKLHFCQUNMLE1BQU1HLEVBQWVwSixLQUFLa0ksU0FBU3hJLGNBQWMsZ0JBQzNDMkosRUFBbUJySixLQUFLa0ksU0FBU3hJLGNBQWMscUJBTXJELE9BSkEwSixFQUFhNUQsSUFBTXhGLEtBQUtxSSxNQUN4QmUsRUFBYTNELElBQU16RixLQUFLb0ksTUFDeEJpQixFQUFpQnpKLFlBQWNJLEtBQUtvSSxNQUU3QnBJLEtBQUtrSSxRQUNkLEdMZ0RZLENBQ0VyQixPQUNBbUIsaUJBQWtCLEtBQ2hCN0MsRUFBV0MsS0FBS3lCLEVBQUssRUFFdkJvQixrQkFBbUIsS0FDakIsTUFBTXFCLEVBQVN4QixFQUFLYyxVQUNwQmpGLEVBQ0c0RixlQUFlRCxHQUNmcEQsTUFBSyxLQUNKNEIsRUFBS2tCLG1CQUNMMUMsUUFBUWtELElBQUssZ0NBQStCLElBRTdDcEQsT0FBT0MsR0FBUUMsUUFBUUMsTUFBTUYsSUFBSyxHQUd6QyxrQkFFRmMsRUFBaUJTLFFBQVFFLEVBQUtxQixlQUFlLEdBQzdDLEdEbkhJLGdCQ3dIWmhDLEVBQWlCTyxhQUFhLElBRS9CdEIsT0FBT0MsSUFDTkMsUUFBUUMsTUFBTUYsRUFBSSxJQUd0QlUsRUFBY3RFLG9CQUNka0UsRUFBYWxFLG9CQUNiMEMsRUFBVzFDLG9CQUVYK0QsRUFBa0JwRixtQkFDbEJzRixFQUFvQnRGLGtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEZvcm1WYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3Rvcihmb3JtRWxlbWVudCwgc2V0dGluZ3MpIHtcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xuICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG4gIH1cblxuICBfc2hvd0lucHV0RXJyb3IgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dC5pZH0tZXJyb3JgKTtcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBpbnB1dC52YWxpZGF0aW9uTWVzc2FnZTtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9zZXR0aW5ncy5lcnJvckNsYXNzKTtcbiAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmlucHV0RXJyb3JDbGFzcyk7XG4gIH07XG5cbiAgX2hpZGVJbnB1dEVycm9yID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7aW5wdXQuaWR9LWVycm9yYCk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX3NldHRpbmdzLmlucHV0RXJyb3JDbGFzcyk7XG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuZXJyb3JDbGFzcyk7XG4gIH07XG5cbiAgX2NoZWNrSW5wdXRWYWxpZGl0eSA9IChpbnB1dCwgc2V0dGluZ3MpID0+IHtcbiAgICBpZiAoaW5wdXQudmFsaWRpdHkudmFsaWQpIHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0LCBzZXR0aW5ncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0LCBzZXR0aW5ncyk7XG4gICAgfVxuICB9O1xuXG4gIF9jaGVja0Zvcm1WYWxpZGl0eSA9ICgpID0+IHtcbiAgICBjb25zdCBpbnB1dExpc3QgPSBbXG4gICAgICAuLi50aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NldHRpbmdzLmlucHV0U2VsZWN0b3IpLFxuICAgIF07XG4gICAgcmV0dXJuIGlucHV0TGlzdC5ldmVyeSgoaW5wdXQpID0+IGlucHV0LnZhbGlkaXR5LnZhbGlkKTtcbiAgfTtcblxuICBfdG9nZ2xlQnV0dG9uU3RhdGUgPSAoKSA9PiB7XG4gICAgY29uc3QgaXNWYWxpZCA9IHRoaXMuX2NoZWNrRm9ybVZhbGlkaXR5KCk7XG4gICAgY29uc3QgYnV0dG9uID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIHRoaXMuX3NldHRpbmdzLnN1Ym1pdEJ1dHRvblNlbGV0b3JcbiAgICApO1xuICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgIGJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmluYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgIH1cbiAgfTtcblxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xuICAgIGNvbnN0IGZvcm1MaXN0ID0gQXJyYXkuZnJvbShcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2V0dGluZ3MuZm9ybVNlbGVjdG9yKVxuICAgICk7XG5cbiAgICBmb3JtTGlzdC5mb3JFYWNoKChmb3JtRWxlbWVudCkgPT4ge1xuICAgICAgZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSk7XG4gICAgICBjb25zdCBpbnB1dHMgPSBbXG4gICAgICAgIC4uLmZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2V0dGluZ3MuaW5wdXRTZWxlY3RvciksXG4gICAgICBdO1xuXG4gICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xuICAgICAgZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2V0XCIsICgpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgICAgICAgfSwgMCk7IC8vIGl04oCZcyBlbm91Z2ggdG8gcHV0IDAgbXMgaGVyZVxuICAgICAgfSk7XG5cbiAgICAgIGlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dCwgdGhpcy5fc2V0dGluZ3MpO1xuICAgICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybVZhbGlkYXRvcjtcbiIsImNsYXNzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHRoaXMuX3BvcHVwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7cG9wdXBTZWxlY3Rvcn1gKTtcbiAgfVxuXG4gIG9wZW5Nb2RhbCgpIHtcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1vZGFsX19vcGVuXCIpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLl9oYW5kbGVFc2NhcGVQb3B1cCk7XG4gIH1cblxuICBjbG9zZU1vZGFsKCkge1xuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfX29wZW5cIik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2hhbmRsZUVzY2FwZVBvcHVwKTtcbiAgfVxuXG4gIF9oYW5kbGVDbG9zZUJ1dHRvbiA9ICgpID0+IHtcbiAgICB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgfTtcblxuICBfaGFuZGxlRXNjYXBlUG9wdXAgPSAoZXZ0KSA9PiB7XG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIHRoaXMuY2xvc2VNb2RhbCgpO1xuICAgIH1cbiAgfTtcblxuICBfaGFuZGxlTW9kYWxPdmVybGF5ID0gKGV2dCkgPT4ge1xuICAgIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIi5tb2RhbFwiKSkge1xuICAgICAgdGhpcy5jbG9zZU1vZGFsKCk7XG4gICAgfVxuICB9O1xuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChldnQpID0+IHtcbiAgICAgIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsX19vcGVuXCIpKSB7XG4gICAgICAgIHRoaXMuY2xvc2VNb2RhbCgpO1xuICAgICAgfVxuICAgICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfX2Nsb3NlXCIpKSB7XG4gICAgICAgIHRoaXMuY2xvc2VNb2RhbCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHVwO1xuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCB9KSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fbW9kYWxGb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XG4gICAgdGhpcy5faW5wdXRzID0gdGhpcy5fbW9kYWxGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpO1xuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVGb3JtU3VibWl0O1xuICB9XG5cbiAgX2dldElucHV0VmFsdWVzKCkge1xuICAgIHRoaXMuX2Zvcm1WYWx1ZXMgPSB7fTtcbiAgICB0aGlzLl9pbnB1dHMuZm9yRWFjaChcbiAgICAgIChpbnB1dCkgPT4gKHRoaXMuX2Zvcm1WYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZSlcbiAgICApO1xuICAgIHJldHVybiB0aGlzLl9mb3JtVmFsdWVzO1xuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9tb2RhbEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQodGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSk7XG4gICAgfSk7XG4gIH1cblxuICBjbG9zZU1vZGFsKCkge1xuICAgIHRoaXMuX21vZGFsRm9ybS5yZXNldCgpO1xuICAgIHN1cGVyLmNsb3NlTW9kYWwoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQb3B1cFdpdGhGb3JtO1xuIiwiZXhwb3J0IGNvbnN0IEJBU0VfVVJMID0gXCJodHRwczovL2Fyb3VuZC5ub21vcmVwYXJ0aWVzLmNvL3YxL2dyb3VwLTEyXCI7XG5leHBvcnQgY29uc3QgQVVUSF9UT0tFTiA9IFwiZGIwY2IwYjUtYjBlZi00ODQzLWE4YWYtOWMzZGI2MGU1MGNiXCI7XG5cbi8vIHZhbGlkYXRpb24gYWN0aXZhdGlvblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRGb3JtQ29uZmlnID0ge1xuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxuICBzdWJtaXRCdXR0b25TZWxldG9yOiBcIi5tb2RhbF9fc2F2ZS1idXR0b25cIixcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uLWRpc2FibGVkXCIsXG4gIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faW5wdXQtZXJyb3JcIixcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxufTtcblxuZXhwb3J0IGNvbnN0IHNlbGVjdG9ycyA9IHtcbiAgY2FyZHNTZWN0aW9uOiBcIi5jYXJkc19fbGlzdFwiLFxuICBjYXJkVGVtcGxhdGU6IFwiI2NhcmQtdGVtcGxhdGVcIixcbiAgYWRkTW9kYWw6IFwiI21vZGFsX19jcmVhdGVcIixcbiAgZWRpdE1vZGFsOiBcIiNtb2RhbF9fZWRpdFwiLFxuICBpbWFnZU1vZGFsOiBcIiNtb2RhbC1pbWFnZVwiLFxuICBjYXJkTW9kYWxGb3JtOiBcIi5tb2RhbF9fZm9ybS1jcmVhdGVcIixcbiAgcHJvZmlsZU1vZGFsRm9ybTogXCIubW9kYWxfX2Zvcm0tZWRpdFwiLFxuICBtb2RhbFNlbGVjdG9yOiBcIi5tb2RhbFwiLFxuICBwcm9maWxlVGl0bGU6IFwiLnByb2ZpbGVfX3RpdGxlXCIsXG4gIHByb2ZpbGVEZXNjcmlwdGlvbjogXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIixcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVNb2RhbEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtLWNyZWF0ZVwiKTtcbmV4cG9ydCBjb25zdCBhZGRDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpO1xuXG5leHBvcnQgY29uc3QgZWRpdFVzZXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2VkaXQtYnV0dG9uXCIpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVJbnB1dE5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5tb2RhbF9faW5wdXQtcHJvZmlsZS1uYW1lXCJcbik7XG5leHBvcnQgY29uc3QgcHJvZmlsZUlucHV0RGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5tb2RhbF9faW5wdXQtcHJvZmlsZS1kZXNjcmlwdGlvblwiXG4pO1xuIiwiaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcblxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XG5cbmltcG9ydCB7XG4gIHNlbGVjdG9ycyxcbiAgY3JlYXRlTW9kYWxGb3JtLFxuICBhZGRDYXJkQnV0dG9uLFxuICBlZGl0VXNlckJ1dHRvbixcbiAgcHJvZmlsZUlucHV0TmFtZSxcbiAgcHJvZmlsZUlucHV0RGVzY3JpcHRpb24sXG4gIGRlZmF1bHRGb3JtQ29uZmlnLFxuICBCQVNFX1VSTCxcbiAgQVVUSF9UT0tFTixcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcbiAgYmFzZVVybDogQkFTRV9VUkwsXG4gIGF1dGhUb2tlbjogQVVUSF9UT0tFTixcbn0pO1xuXG5jb25zdCBlZGl0VXNlck1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtb2RhbF9fZWRpdFwiKTtcbmNvbnN0IGFkZENhcmRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWxfX2NyZWF0ZVwiKTtcbmNvbnN0IGltYWdlUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXCIjaW1hZ2UtbW9kYWxcIik7XG5cbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKFxuICBzZWxlY3RvcnMucHJvZmlsZVRpdGxlLFxuICBzZWxlY3RvcnMucHJvZmlsZURlc2NyaXB0aW9uXG4pO1xuXG5hcGlcbiAgLmdldFVzZXJJbmZvKClcbiAgLnRoZW4oKHVzZXIpID0+IHtcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7XG4gICAgICBuYW1lOiB1c2VyLm5hbWUsXG4gICAgICBhYm91dDogdXNlci5hYm91dCxcbiAgICB9KTtcbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0pO1xuXG4vLyBhcGlcbi8vICAgLmFkZFVzZXJMaWtlcyhcIjYzOWRjNmVmNjBjZjkwMWVlY2Q4M2QyZlwiKVxuLy8gICAudGhlbigobGlrZSkgPT4gY29uc29sZS5sb2cobGlrZSkpXG4vLyAgIC5jYXRjaCgoZXJyKSA9PiB7XG4vLyAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuLy8gICB9KTtcblxuY29uc3QgZWRpdEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihlZGl0VXNlck1vZGFsLCBkZWZhdWx0Rm9ybUNvbmZpZyk7XG5jb25zdCBjcmVhdGVGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoYWRkQ2FyZE1vZGFsLCBkZWZhdWx0Rm9ybUNvbmZpZyk7XG5cbmFkZENhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgYWRkRm9ybU1vZGFsLm9wZW5Nb2RhbCgpO1xufSk7XG5cbmNvbnN0IGFkZEZvcm1Nb2RhbCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcbiAgcG9wdXBTZWxlY3Rvcjogc2VsZWN0b3JzLmFkZE1vZGFsLFxuICBoYW5kbGVGb3JtU3VibWl0OiAoZGF0YSkgPT4ge1xuICAgIGFwaVxuICAgICAgLmFkZENhcmQoZGF0YSlcbiAgICAgIC50aGVuKChkYXRhKSA9PiBkYXRhKVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfSk7XG4gICAgY3JlYXRlTW9kYWxGb3JtLnJlc2V0KCk7XG4gICAgYWRkRm9ybU1vZGFsLmNsb3NlTW9kYWwoKTtcbiAgfSxcbn0pO1xuXG5lZGl0VXNlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBjb25zdCB7IG5hbWUsIHJvbGUgfSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XG4gIHByb2ZpbGVJbnB1dE5hbWUudmFsdWUgPSBuYW1lO1xuICBwcm9maWxlSW5wdXREZXNjcmlwdGlvbi52YWx1ZSA9IHJvbGU7XG4gIGVkaXRGb3JtTW9kYWwub3Blbk1vZGFsKCk7XG59KTtcblxuY29uc3QgZWRpdEZvcm1Nb2RhbCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcbiAgcG9wdXBTZWxlY3Rvcjogc2VsZWN0b3JzLmVkaXRNb2RhbCxcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKGRhdGEpID0+IHtcbiAgICBhcGlcbiAgICAgIC5lZGl0VXNlckluZm8oZGF0YSlcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHtcbiAgICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICAgICAgYWJvdXQ6IGRhdGEuYWJvdXQsXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH0pO1xuICAgIGVkaXRGb3JtTW9kYWwuY2xvc2VNb2RhbCgpO1xuICB9LFxufSk7XG5cbmFwaVxuICAuZ2V0SW5pdGlhbENhcmRzKClcbiAgLnRoZW4oKGNhcmRzKSA9PiB7XG4gICAgY29uc3Qgc2VjdGlvbkxpc3RJdGVtcyA9IG5ldyBTZWN0aW9uKFxuICAgICAge1xuICAgICAgICBpdGVtczogY2FyZHMsXG4gICAgICAgIHJlbmRlcmVyOiAoKSA9PiB7XG4gICAgICAgICAgY2FyZHMuZm9yRWFjaCgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICBoYW5kbGVJbWFnZUNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZVBvcHVwLm9wZW4oZGF0YSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoYW5kbGVEZWxldGVDbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY2FyZElkID0gY2FyZC5nZXRCeUlkKCk7XG4gICAgICAgICAgICAgICAgICBhcGlcbiAgICAgICAgICAgICAgICAgICAgLmRlbGV0ZUNhcmRCeUlkKGNhcmRJZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNhcmQuaGFuZGxlRGVsZXRlQ2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDYXJkIHdhcyBkZWxldGVkIHN1Y2Nlc3NmdWxseWApO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIiNjYXJkLXRlbXBsYXRlXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBzZWN0aW9uTGlzdEl0ZW1zLmFkZEl0ZW0oY2FyZC5nZW5lcmF0ZUNhcmQoKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgc2VsZWN0b3JzLmNhcmRzU2VjdGlvblxuICAgICk7XG4gICAgc2VjdGlvbkxpc3RJdGVtcy5yZW5kZXJJdGVtcygpO1xuICB9KVxuICAuY2F0Y2goKGVycikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfSk7XG5cbmVkaXRGb3JtTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbmFkZEZvcm1Nb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xuaW1hZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5lZGl0Rm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5jcmVhdGVGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbiIsImNsYXNzIEFwaSB7XG4gIGNvbnN0cnVjdG9yKHsgYmFzZVVybCwgYXV0aFRva2VuIH0pIHtcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcbiAgICB0aGlzLl9hdXRoVG9rZW4gPSBhdXRoVG9rZW47XG4gIH1cblxuICAvLyBHRVQ6IExpc3Qgb2YgY2FyZHNcbiAgZ2V0SW5pdGlhbENhcmRzID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgaGVhZGVyczogeyBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRoVG9rZW4gfSxcbiAgICB9KTtcbiAgICBsZXQgZGF0YSA9IHJlc3BvbnNlLm9rXG4gICAgICA/IHJlc3BvbnNlLmpzb24oKVxuICAgICAgOiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgLy8gUE9TVDogQWRkIG5ldyBjYXJkXG4gIGFkZENhcmQgPSBhc3luYyAoeyBuYW1lLCBsaW5rIH0pID0+IHtcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhUb2tlbixcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lLFxuICAgICAgICBsaW5rLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBsZXQgZGF0YSA9IHJlc3BvbnNlLm9rXG4gICAgICA/IHJlc3BvbnNlLmpzb24oKVxuICAgICAgOiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgLy8gREVMRVRFOiBEZWxldGUgY2FyZFxuICBkZWxldGVDYXJkQnlJZCA9IGFzeW5jIChpZCkgPT4ge1xuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7aWR9YCwge1xuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRoVG9rZW4sXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgaWQsXG4gICAgICB9KSxcbiAgICB9KTtcblxuICAgIGxldCBkYXRhID0gcmVzcG9uc2Uub2tcbiAgICAgID8gcmVzcG9uc2UuanNvbigpXG4gICAgICA6IFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICAvLyBHRVQ6IEdldHMgVXNlciBQcm9maWxlXG4gIGdldFVzZXJJbmZvID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xuICAgICAgaGVhZGVyczogeyBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRoVG9rZW4gfSxcbiAgICB9KTtcbiAgICBsZXQgZGF0YSA9IHJlc3BvbnNlLm9rXG4gICAgICA/IHJlc3BvbnNlLmpzb24oKVxuICAgICAgOiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgLy8gUEFUQ0g6IEVkaXQgVXNlciBQcm9maWxlXG4gIGVkaXRVc2VySW5mbyA9IGFzeW5jICh7IG5hbWUsIGFib3V0IH0pID0+IHtcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRoVG9rZW4sXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgYWJvdXQsXG4gICAgICB9KSxcbiAgICB9KTtcbiAgICBsZXQgZGF0YSA9IHJlc3BvbnNlLm9rXG4gICAgICA/IHJlc3BvbnNlLmpzb24oKVxuICAgICAgOiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgLy8gUFVUOiBBZGQgVXNlciBsaWtlc1xuICBhZGRVc2VyTGlrZXMgPSBhc3luYyAoaWQpID0+IHtcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy9saWtlcy8ke2lkfWAsIHtcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fYXV0aFRva2VuLFxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGlkLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBsZXQgZGF0YSA9IHJlc3BvbnNlLm9rXG4gICAgICA/IHJlc3BvbnNlLmpzb24oKVxuICAgICAgOiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwaTtcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5jbGFzcyBQb3BXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XG4gIG9wZW4oeyBuYW1lLCBsaW5rIH0pIHtcbiAgICB0aGlzLl9pbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2ltYWdlLW1vZGFsXCIpO1xuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICBjb25zdCBjYXJkSW1hZ2UgPSB0aGlzLl9pbWFnZUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fcHJldmlldy1pbWFnZVwiKTtcbiAgICBjb25zdCBjYXJkRGVzY3JpcHRpb24gPSB0aGlzLl9pbWFnZUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY2FwdGlvblwiKTtcblxuICAgIGNhcmRJbWFnZS5zcmMgPSBsaW5rO1xuICAgIGNhcmRJbWFnZS5hbHQgPSBuYW1lO1xuICAgIGNhcmREZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgc3VwZXIub3Blbk1vZGFsKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9wV2l0aEltYWdlO1xuIiwiY2xhc3MgVXNlckluZm8ge1xuICBjb25zdHJ1Y3RvcihuYW1lU2VsZWN0b3IsIGRlc2NyaXB0aW9uU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9uYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGVjdG9yKTtcbiAgICB0aGlzLl9kZXNjcmlwdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRlc2NyaXB0aW9uU2VsZWN0b3IpO1xuICB9XG5cbiAgZ2V0VXNlckluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50LFxuICAgICAgcm9sZTogdGhpcy5fZGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50LFxuICAgIH07XG4gIH1cblxuICBzZXRVc2VySW5mbyh7IG5hbWUsIGFib3V0IH0pIHtcbiAgICB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgdGhpcy5fZGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gYWJvdXQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVXNlckluZm87XG4iLCJjbGFzcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XG4gIH1cblxuICByZW5kZXJJdGVtcygpIHtcbiAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZEl0ZW0oaXRlbSkge1xuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGl0ZW0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlY3Rpb247XG4iLCJjbGFzcyBDYXJkIHtcbiAgY29uc3RydWN0b3IoeyBkYXRhLCBoYW5kbGVJbWFnZUNsaWNrLCBoYW5kbGVEZWxldGVDbGljayB9LCBjYXJkU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XG4gICAgdGhpcy5faWQgPSBkYXRhLl9pZDtcbiAgICB0aGlzLl9vd25lcklkID0gZGF0YS5vd25lci5faWQ7XG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xuICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrID0gaGFuZGxlRGVsZXRlQ2xpY2s7XG4gIH1cblxuICBnZXRCeUlkKCkge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIF9nZXRUZW1wbGF0ZSgpIHtcbiAgICBjb25zdCBjYXJkVGVtcGxhdGUgPSBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY2FyZFNlbGVjdG9yKVxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgcmV0dXJuIGNhcmRUZW1wbGF0ZTtcbiAgfVxuXG4gIF9oYW5kbGVMaWtlSWNvbiA9ICgpID0+XG4gICAgdGhpcy5fZWxlbWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIilcbiAgICAgIC5jbGFzc0xpc3QudG9nZ2xlKFwiY2FyZF9fbGlrZS1hY3RpdmVcIik7XG5cbiAgaGFuZGxlRGVsZXRlQ2FyZCgpIHtcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICB9XG5cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2VsZW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2RlbGV0ZS1idXR0b25cIilcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2soKSk7XG5cbiAgICB0aGlzLl9lbGVtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl9oYW5kbGVMaWtlSWNvbigpKTtcblxuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT5cbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2soe1xuICAgICAgICBuYW1lOiB0aGlzLl9uYW1lLFxuICAgICAgICBzcmM6IHRoaXMuX2xpbmssXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBnZW5lcmF0ZUNhcmQoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XG4gICAgY29uc3QgaW1hZ2VFbGVtZW50VGV4dCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19sYWJlbC10ZXh0XCIpO1xuXG4gICAgaW1hZ2VFbGVtZW50LnNyYyA9IHRoaXMuX2xpbms7XG4gICAgaW1hZ2VFbGVtZW50LmFsdCA9IHRoaXMuX25hbWU7XG4gICAgaW1hZ2VFbGVtZW50VGV4dC50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG5cbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYXJkO1xuIl0sIm5hbWVzIjpbImNvbnN0cnVjdG9yIiwiZm9ybUVsZW1lbnQiLCJzZXR0aW5ncyIsImlucHV0IiwiZXJyb3JFbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaWQiLCJ0ZXh0Q29udGVudCIsInZhbGlkYXRpb25NZXNzYWdlIiwiY2xhc3NMaXN0IiwiYWRkIiwidGhpcyIsIl9zZXR0aW5ncyIsImVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJyZW1vdmUiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hpZGVJbnB1dEVycm9yIiwiX3Nob3dJbnB1dEVycm9yIiwiX2Zvcm1FbGVtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0U2VsZWN0b3IiLCJldmVyeSIsImlzVmFsaWQiLCJfY2hlY2tGb3JtVmFsaWRpdHkiLCJidXR0b24iLCJzdWJtaXRCdXR0b25TZWxldG9yIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImVuYWJsZVZhbGlkYXRpb24iLCJBcnJheSIsImZyb20iLCJmb3JtU2VsZWN0b3IiLCJmb3JFYWNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsInByZXZlbnREZWZhdWx0IiwiaW5wdXRzIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwic2V0VGltZW91dCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJwb3B1cFNlbGVjdG9yIiwiY2xvc2VNb2RhbCIsImtleSIsInRhcmdldCIsImNvbnRhaW5zIiwiX3BvcHVwRWxlbWVudCIsIm9wZW5Nb2RhbCIsIl9oYW5kbGVFc2NhcGVQb3B1cCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRFdmVudExpc3RlbmVycyIsIlBvcHVwIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX21vZGFsRm9ybSIsIl9pbnB1dHMiLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9nZXRJbnB1dFZhbHVlcyIsIl9mb3JtVmFsdWVzIiwibmFtZSIsInZhbHVlIiwicmVzZXQiLCJkZWZhdWx0Rm9ybUNvbmZpZyIsImNyZWF0ZU1vZGFsRm9ybSIsImFkZENhcmRCdXR0b24iLCJlZGl0VXNlckJ1dHRvbiIsInByb2ZpbGVJbnB1dE5hbWUiLCJwcm9maWxlSW5wdXREZXNjcmlwdGlvbiIsImFwaSIsImJhc2VVcmwiLCJhdXRoVG9rZW4iLCJhc3luYyIsInJlc3BvbnNlIiwiZmV0Y2giLCJfYmFzZVVybCIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwiX2F1dGhUb2tlbiIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwibGluayIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYWJvdXQiLCJlZGl0VXNlck1vZGFsIiwiYWRkQ2FyZE1vZGFsIiwiaW1hZ2VQb3B1cCIsIm9wZW4iLCJfaW1hZ2VFbGVtZW50IiwiY2FyZEltYWdlIiwiY2FyZERlc2NyaXB0aW9uIiwic3JjIiwiYWx0IiwidXNlckluZm8iLCJuYW1lU2VsZWN0b3IiLCJkZXNjcmlwdGlvblNlbGVjdG9yIiwiX25hbWVFbGVtZW50IiwiX2Rlc2NyaXB0aW9uRWxlbWVudCIsImdldFVzZXJJbmZvIiwicm9sZSIsInNldFVzZXJJbmZvIiwidGhlbiIsInVzZXIiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImVkaXRGb3JtVmFsaWRhdG9yIiwiRm9ybVZhbGlkYXRvciIsImNyZWF0ZUZvcm1WYWxpZGF0b3IiLCJhZGRGb3JtTW9kYWwiLCJQb3B1cFdpdGhGb3JtIiwiZGF0YSIsImFkZENhcmQiLCJlZGl0Rm9ybU1vZGFsIiwiZWRpdFVzZXJJbmZvIiwiZ2V0SW5pdGlhbENhcmRzIiwiY2FyZHMiLCJzZWN0aW9uTGlzdEl0ZW1zIiwiY29udGFpbmVyU2VsZWN0b3IiLCJpdGVtcyIsInJlbmRlcmVyIiwiX2l0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsInJlbmRlckl0ZW1zIiwiaXRlbSIsImFkZEl0ZW0iLCJwcmVwZW5kIiwiY2FyZCIsImNhcmRTZWxlY3RvciIsImhhbmRsZUltYWdlQ2xpY2siLCJoYW5kbGVEZWxldGVDbGljayIsIl9lbGVtZW50IiwidG9nZ2xlIiwiX25hbWUiLCJfbGluayIsIl9pZCIsIl9vd25lcklkIiwib3duZXIiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUltYWdlQ2xpY2siLCJfaGFuZGxlRGVsZXRlQ2xpY2siLCJnZXRCeUlkIiwiX2dldFRlbXBsYXRlIiwiY29udGVudCIsImNsb25lTm9kZSIsImhhbmRsZURlbGV0ZUNhcmQiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfaGFuZGxlTGlrZUljb24iLCJnZW5lcmF0ZUNhcmQiLCJpbWFnZUVsZW1lbnQiLCJpbWFnZUVsZW1lbnRUZXh0IiwiY2FyZElkIiwiZGVsZXRlQ2FyZEJ5SWQiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9