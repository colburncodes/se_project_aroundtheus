!function(){"use strict";function e(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function t(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function r(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var s=class{constructor(e,t){r(this,"_showInputError",(e=>{const t=document.querySelector(`.${e.id}-error`);t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass),e.classList.add(this._settings.inputErrorClass)})),r(this,"_hideInputError",(e=>{const t=document.querySelector(`.${e.id}-error`);t.textContent="",e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass)})),r(this,"_checkInputValidity",((e,t)=>{e.validity.valid?this._hideInputError(e,t):this._showInputError(e,t)})),r(this,"_checkFormValidity",(()=>[...this._formElement.querySelectorAll(this._settings.inputSelector)].every((e=>e.validity.valid)))),r(this,"_toggleButtonState",(()=>{this._checkFormValidity()?(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.removeAttribute("disabled")):(this._buttonElement.setAttribute("disabled","true"),this._buttonElement.classList.add(this._settings.inactiveButtonClass))})),this._formElement=e,this._settings=t,this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSeletor)}enableValidation(){Array.from(document.querySelectorAll(this._settings.formSelector)).forEach((e=>{e.addEventListener("submit",(function(e){e.preventDefault()}));const t=[...e.querySelectorAll(this._settings.inputSelector)];this._toggleButtonState(),e.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleButtonState()}),0)})),t.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e,this._settings),this._toggleButtonState()}))}))}))}};function n(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var i=class{constructor(e){n(this,"_handleCloseButton",(()=>{this.closeModal()})),n(this,"_handleEscapePopup",(e=>{"Escape"===e.key&&this.closeModal()})),n(this,"_handleModalOverlay",(e=>{e.target.classList.contains(".modal")&&this.closeModal()})),this._popupElement=document.querySelector(`${e}`)}openModal(){this._popupElement.classList.add("modal__open"),document.addEventListener("keyup",this._handleEscapePopup)}closeModal(){this._popupElement.classList.remove("modal__open"),document.removeEventListener("keyup",this._handleEscapePopup)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal__open")&&this.closeModal(),e.target.classList.contains("modal__close")&&this.closeModal()}))}},o=class extends i{constructor(e){let{popupSelector:t,handleFormSubmit:r}=e;super(t),this._modalForm=this._popupElement.querySelector(".modal__form"),this._inputs=this._modalForm.querySelectorAll(".modal__input"),this._handleFormSubmit=r,this._buttonElement=this._modalForm.querySelector(".modal__save-button")}_getInputValues(){return this._formValues={},this._inputs.forEach((e=>this._formValues[e.name]=e.value)),this._formValues}renderLoading(e){this._buttonElement.textContent=e?"Saving...":"Save"}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}closeModal(){this._modalForm.reset(),super.closeModal()}};const a="db0cb0b5-b0ef-4843-a8af-9c3db60e50cb",l={authorization:a,"Content-Type":"application/json"},d={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSeletor:".modal__save-button",inactiveButtonClass:"modal__button-disabled",inputErrorClass:"modal__input-error",errorClass:"modal__error_visible"},c=document.querySelector(".modal__form-create"),u=document.querySelector(".profile__add-button"),h=document.querySelector(".profile__avatar-edit"),_=document.querySelector(".profile__edit-button"),m=document.querySelector(".modal__input-profile-name"),p=document.querySelector(".modal__input-profile-description"),v=(document.querySelector(".card__like-button"),new class{constructor(t){let{baseUrl:r,authToken:s,headers:n}=t;e(this,"getInitialCards",(async()=>{const e=await fetch(`${this._baseUrl}/cards`,{headers:this._headers});return this._handleResponse(e)})),e(this,"addCard",(async e=>{let{name:t,link:r}=e;const s=await fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})});return this._handleResponse(s)})),e(this,"deleteCardById",(async e=>{const t=await fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers,body:JSON.stringify({id:e})});return this._handleResponse(t)})),e(this,"getUserInfo",(async()=>{const e=await fetch(`${this._baseUrl}/users/me`,{headers:this._headers});return this._handleResponse(e)})),e(this,"editUserInfo",(async e=>{let{name:t,about:r}=e;const s=await fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})});return this._handleResponse(s)})),e(this,"setUserAvatar",(async e=>{let{avatar:t}=e;const r=await fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})});return this._handleResponse(r)})),e(this,"changeCardLikeStatus",(async(e,t)=>{const r=await fetch(`${this._baseUrl}/cards/likes/${e}`,{method:t?"PUT":"DELETE",headers:this._headers,body:JSON.stringify({like:t})});return this._handleResponse(r)})),this._baseUrl=r,this._authToken=s,this._headers=n}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status} ${e.statusText}`)}_handleResponseError(e){console.log(`Error processing request ${e}`)}getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",authToken:a,headers:l})),b=document.querySelector("#modal__edit"),y=document.querySelector("#modal__create"),f=document.querySelector("#avatar-modal"),g=new class extends i{open(e){let{name:t,link:r}=e;this._imageElement=document.querySelector("#image-modal"),super.setEventListeners();const s=this._imageElement.querySelector(".modal__preview-image"),n=this._imageElement.querySelector(".modal__caption");s.src=r,s.alt=t,n.textContent=t,super.openModal()}}("#image-modal"),S=new class extends i{constructor(e){super(e),this._modalElement=document.querySelector(e),this._submitButton=this._modalElement.querySelector(".modal__save-button")}renderLoading(e){this._submitButton.textContent=e?"Deleting...":"Yes"}setSubmitAction(e){this._submitButton.addEventListener("click",e)}setEventListeners(){super.setEventListeners(),this._submitButton.classList.remove("modal__button-disabled")}}("#delete-modal"),E=new class{constructor(e,t,r){this._nameElement=document.querySelector(e),this._descriptionElement=document.querySelector(t),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,role:this._descriptionElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,about:r}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=r}setAvatar(e){this._avatarElement.src=e}}(".profile__title",".profile__description",".profile__image"),L=new s(b,d),k=new s(y,d),C=new s(f,d);function q(e,r){const s=new class{constructor(e,r){let{data:s,userId:n,handleImageClick:i,handleDeleteClick:o,handleUserLikes:a}=e;t(this,"getCardId",(()=>this._id)),t(this,"handleLikeIcon",(()=>{this._element.querySelector(".card__like-button").classList.toggle("card__like-active")})),this._data=s,this._id=s._id,this._userId=n,this._ownerId=s.owner._id,this._name=s.name,this._link=s.link,this._likes=s.likes,this._cardSelector=r,this._handleImageClick=i,this._handleDeleteClick=o,this._handleUserLikes=a}getUserLikesCount(){if(this._likes.length>0)return this._likes.length}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}handleDeleteCard(){this._element.remove()}setLikes(e){this._likes=e,this._renderLikes()}isLiked(){}renderLikes(){this.isLiked()?this._element.querySelector(".card__like-button").classList.add("card__like-active"):this._element.querySelector(".card__like-button").classList.remove("card__like-active")}_setEventListeners(){this._element.querySelector(".card__delete-button").addEventListener("click",(()=>this._handleDeleteClick())),this._element.querySelector(".card__like-button").addEventListener("click",(()=>this._handleUserLikes())),this._element.querySelector(".card__image").addEventListener("click",(()=>this._handleImageClick({name:this._name,src:this._link})))}generateCard(){this._element=this._getTemplate(),this._setEventListeners();const e=this._element.querySelector(".card__image"),t=this._element.querySelector(".card__label-text"),r=this._element.querySelector(".card__like-count");return e.src=this._link,e.alt=this._name,t.textContent=this._name,r.textContent=this.getUserLikesCount(),this._userId==this._ownerId?this.handleDeleteCard():this._element.querySelector(".card__delete-button").remove(),this._element}}({data:e,userId:r,handleImageClick:()=>{g.open(e)},handleDeleteClick:()=>{const e=s.getCardId();S.openModal(),S.setSubmitAction((()=>{S.renderLoading(!0),v.deleteCardById(e).then((()=>{s.handleDeleteCard(),S.closeModal()})).catch((e=>console.error(e))).finally((()=>S.renderLoading(!1)))}))},handleUserLikes:()=>{const e=s.getCardId(),t=s.getUserLikesCount();v.changeCardLikeStatus(e,t).then((()=>{s.handleLikeIcon()})).catch((e=>console.error(e)))}},"#card-template");return s.generateCard()}u.addEventListener("click",(()=>{I.openModal()}));const I=new o({popupSelector:"#modal__create",handleFormSubmit:e=>{I.renderLoading(!0),v.addCard(e).then((e=>{q(e),c.reset(),I.closeModal()})).catch((e=>{console.error(e)})).finally((()=>I.renderLoading(!1)))}});h.addEventListener("click",(()=>{w.openModal()}));const w=new o({popupSelector:"#avatar-modal",handleFormSubmit:e=>{w.renderLoading(!0),v.setUserAvatar(e).then((e=>{E.setAvatar(e),w.closeModal()})).catch((e=>console.log(e))).finally((()=>w.renderLoading(!1)))}});_.addEventListener("click",(()=>{const{name:e,role:t}=E.getUserInfo();(e=>{let{name:t,role:r}=e;m.value=t,p.value=r})({name:e,role:t}),U.openModal()}));const U=new o({popupSelector:"#modal__edit",handleFormSubmit:e=>{U.renderLoading(!0),v.editUserInfo(e).then((e=>{E.setUserInfo({name:e.name,about:e.about,avatar:e.avatar}),U.closeModal()})).catch((e=>{console.error(e)})).finally((()=>U.renderLoading(!1)))}});v.getAppInfo().then((e=>{let[t,r]=e;E.setUserInfo({name:t.name,about:t.about});const s=t.avatar;E.setAvatar(s);const n=t._id,i=new class{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:r,renderer:e=>{const t=q(e,n);i.addItem(t)}},".cards__list");i.renderItems()})).catch((e=>{console.error(e)})),I.setEventListeners(),w.setEventListeners(),S.setEventListeners(),U.setEventListeners(),g.setEventListeners(),C.enableValidation(),k.enableValidation(),L.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,